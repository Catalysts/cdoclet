#* @vtlvariable name="typeDescriptor" type="cc.catalysts.cdoclet.generator.velocity.TypeDescriptor" *#
#parse("templates/cs/cs_macros.vm")
#*
	CLASS
*#
namespace $typeDescriptor.nameSpace {
#region CDoclet generated code
#if($typeDescriptor.description)	/**
	 * <summary>
	 * $typeDescriptor.description
	 * </summary>
	 */
#end
#foreach($annotation in $typeDescriptor.annotations)	[$annotation.qualifiedTypeName]
#end
	public#if($typeDescriptor.abstract) abstract#end class $typeDescriptor.typeName#cs_generics($typeDescriptor)#cs_implements($typeDescriptor)#cs_bounds($typeDescriptor) {
#foreach($fieldDescriptor in $typeDescriptor.fieldDescriptors)
#if($fieldDescriptor.description)		/**
		 * <summary>
		 * $fieldDescriptor.description
		 * </summary>
		 */
#end
		#if($fieldDescriptor.modifier == "static")public const#else$fieldDescriptor.modifier#end #cs_type($fieldDescriptor) $fieldDescriptor.fieldName#if($fieldDescriptor.value) = $fieldDescriptor.value#end;
#end
#foreach($propertyDescriptor in $typeDescriptor.propertyDescriptors)
		#cs_modifiers($propertyDescriptor, 'virtual')#cs_property($propertyDescriptor) {#if($propertyDescriptor.getter) get { return this.$propertyDescriptor.fieldName; }#end#if($propertyDescriptor.setter) set { this.$propertyDescriptor.fieldName = value; }#end }
#end
#foreach($methodDescriptor in $typeDescriptor.methodDescriptors)
#if($methodDescriptor.description)		/**
		 * <summary>
		 * $methodDescriptor.description
		 * </summary>
		 */
#end
		#cs_modifiers($methodDescriptor, '')#cs_method($methodDescriptor) #if($methodDescriptor.body)$methodDescriptor.body
#else{}
#end
#end
	}
#endregion
}
