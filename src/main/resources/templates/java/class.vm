#* @vtlvariable name="typeDescriptor" type="cc.catalysts.cdoclet.generator.velocity.TypeDescriptor" *#
#parse("templates/java/macros.vm")
#*
	CLASS
*#
package $typeDescriptor.nameSpace;
#if($typeDescriptor.description)/**
 * $typeDescriptor.description
 */
#end
#foreach($annotation in $typeDescriptor.annotations)@$annotation.name
#end
public class $typeDescriptor.typeName#generics($typeDescriptor)#implements($typeDescriptor) {
#foreach($fieldDescriptor in $typeDescriptor.fieldDescriptors)
#if(!$typeDescriptor.superClass)
#if($fieldDescriptor.description)	/**
	 * $fieldDescriptor.description
	 */
#end
	#if($fieldDescriptor.modifier == "static")public const#else$fieldDescriptor.modifier#end #type($fieldDescriptor) $fieldDescriptor.fieldName#if($fieldDescriptor.value) = $fieldDescriptor.value#end;
#end
#end
#foreach($propertyDescriptor in $typeDescriptor.propertyDescriptors)
#if($propertyDescriptor.getter)
	#modifiers($propertyDescriptor)#propertyget($propertyDescriptor)() {
	#if($typeDescriptor.superClass)	return super.#getset($propertyDescriptor, "get")();
#else	return this.$propertyDescriptor.fieldName;
#end
	}
#end
#if($propertyDescriptor.setter)
	#modifiers($propertyDescriptor)#propertyset($propertyDescriptor)(#type($propertyDescriptor) value) {
	#if($typeDescriptor.superClass)	super.#getset($propertyDescriptor, "set")(value);
#else	this.$propertyDescriptor.fieldName = value;
#end
	}
#end
#if(!$propertyDescriptor.getter && !$propertyDescriptor.setter)
	
	#modifiers($propertyDescriptor)#property($propertyDescriptor, "")() {
	}
#end
#end
#foreach($methodDescriptor in $typeDescriptor.methodDescriptors)
#if($methodDescriptor.description)	/**
	 * $methodDescriptor.description
	 */
#end
	#modifiers($methodDescriptor)#method($methodDescriptor) #if($methodDescriptor.body)$methodDescriptor.body
#else{}
#end
#end
}
